<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>
//1. Import Frameworks
import SwiftUI
import PlaygroundSupport
import RealityKit
import SwiftUI
import ARKit

//5. Create bodySkeleton entity to visualize and update joint pose
class BodySkeleton: Entity{
    var joints: [String: Entity] = [:] //jointNames mapped to JoinEntities
    required init(for bodyAnchor: ARBodyAnchor) {
        super.init()
        
            //6. Create entity for each joint in skeleton
        for jointName in ARSkeletonDefinition.defaultBody3D.jointNames {
            //Default values for joint appearance
            var jointRadius: Float = 0.03
            var jointColor: UIColor = .green
            
            //12. Set Color and size based on specific jointName
            switch jointName {
            case "neck_1_joint", "neck_2_joint", "neck_3_joint", "neck_4_joint", "head_joint", "left_sholder_1_joint", "right_shouder_1_joint":
                jointRadius *= 0.5
            case "jaw_joint", "chin_joint", "left_eye_joint", "left_eyeLowerid_joint", "left_eyeball_joint", "nose_joint", "right_eye_joint", "right_eyeLowerLid_joint", "right_eyeUpperid_joint", "right_eyeball_joint":
                jointRadius *= 0.2;
                jointColor = .yellow
            case _ where jointName.hasPrefix("spine_"):
                jointRadius *= 0.75
            case "left_hand_joint", "right_hand_joint":
                jointRadius *= 0.75
            case "left_hand_joint", "right_hand_joint":
                jointRadius *= 1
                jointColor = .green
            case _ where jointName.hasPrefix("left_hand") || jointName.hasPrefix("right_hand"):
                jointRadius *= 0.25
                jointColor = .yellow
            case _ where jointName.hasPrefix("left_toes") || jointName.hasPrefix("right_toes"):
                jointRadius *= 0.5
                jointColor = .yellow
            default:
                jointRadius = 0.05
                jointColor = .green
            }
            //Create an entity for the joint, add to joints dictionary, and add it to the parent entity (i.e. bodySkeleton)
            let jointEntity = makeJoint(radius: jointRadius, color: jointColor)
            joints[jointName] = jointEntity
            self.addChild(jointEntity)
            
        }
        self.update(with: bodyAnchor)
    }

    required init() {
        fatalError("init() has not been implemented")
    }
    //7. Create helper method to create a sphere-shaped entity with specified radius and color for joint
    
    func makeJoint(radius: Float, color: UIColor ) -&gt; Entity {
        let mesh = MeshResource.generateSphere(radius: radius)
        let material = SimpleMaterial (color: color, roughness: 0.8, isMetallic: false)
        let modelEntity = ModelEntity(mesh: mesh, materials: [material])
        return modelEntity
    }
    
    //8. Create method to update the position and orientation or each jointEntity
    func update(with bodyAnchor: ARBodyAnchor) {
        let rootPosition = simd_make_float3(bodyAnchor.transform.columns.3)
        
        for jointName in ARSkeletonDefinition.defaultBody3D.jointNames{
            if let jointEntity = joints[jointName], let jointTransform = bodyAnchor.skeleton.modelTransform(for: ARSkeleton.JointName(rawValue: jointName)) {
                let jointOffset = simd_make_float3(jointTransform.columns.3)
                jointEntity.position = rootPosition + jointOffset
                jointEntity.orientation = Transform (matrix: jointTransform).rotation 
                
            }
        }
    }
}

//9. Create global variables for BodySkeleton
var bodySkeleton: BodySkeleton? 
var bodySkeletonAnchor = AnchorEntity() 

//3.Create ARViewContainer
struct ARViewContainer: UIViewRepresentable {
    typealias UIViewType = ARView
    
    func makeUIView(context: UIViewRepresentableContext&lt;ARViewContainer&gt;) -&gt; ARView {
        let arView = ARView (frame: .zero, cameraMode: .ar, automaticallyConfigureSession: true)
        
        
        arView.setupForBodyTracking()
        //10. Add bodySkeletonAnchor to scence
        arView.scene.addAnchor(bodySkeletonAnchor)
        
        return arView
            
    }
    func updateUIView(_ uiView: ARView, context:UIViewRepresentableContext&lt;ARViewContainer&gt; ) {
        
    }     
}
//4. Extend ARView to implement body tracking functionality
extension ARView:ARSessionDelegate {
    //4a. Configure ARView for body tracking
    //Note: Don't forget to call this method in ARViewContainer
    func setupForBodyTracking () {
        let config = ARBodyTrackingConfiguration()
        self.session.run(config)
        self.session.delegate = self
    }
    //4b. Implement ARSession didUpdate anchors delegate method
    public func session(_ session: ARSession, didUpdate anchors: [ARAnchor]) {
        for anchor in anchors {
            if let bodyAnchor = anchor as? ARBodyAnchor {
                print("Updated bodyAnchor.")
                let skeleton = bodyAnchor.skeleton
                let rootJointTransform = skeleton.modelTransform(for: .root)!
                let rootJointPosition = simd_make_float3(rootJointTransform.columns.3)
                print("root: \(rootJointPosition)")
                
                let leftHandTransform = skeleton.modelTransform(for: .leftHand)!
                let leftHandOffset = simd_make_float3(leftHandTransform.columns.3)
                let leftHandPosition = rootJointPosition + leftHandOffset 
                print("leftHand: \(leftHandPosition)")
                    //state 14:55 Ok
                //11. Create or update bodySkeleton 
                if let skeleton = bodySkeleton {
                    // BodySkeleton already exits, update pose of all joints
                    skeleton.update(with: bodyAnchor)
                }else {
                    // Seeing body for the first time, create bodySkeleton 
                    let skeleton = BodySkeleton(for: bodyAnchor)
                    bodySkeleton = skeleton
                    bodySkeletonAnchor.addChild(skeleton)
                }
            }
        }
    }
        
    }


//2a.Create ContentView
struct ContentView: View {
    var body: some View {
        return ARViewContainer()
        
    }
}
//Create content View as Liveview
PlaygroundPage.current.setLiveView(ContentView())
</string>
			<key>ModifiedRange</key>
			<string>{1, 6334}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
